[[{"l":"Welcome","p":["This website contains some docs on how to create a discord bot."]}],[{"l":"Setup","p":["Set up needed to start","Account","Python"]}],[{"l":"Setting up your discord bot"},{"l":"Creating an app","p":["First, you'll need to create an app in the developer portal if you don't have one already:","Create App","Enter a name for your app, then press Create.","After you create your app, you'll land on the General Overview page of the app's settings where you can update basic information about your app like its description and icon. You'll also see an Application ID and Interactions Endpoint URL, which we'll use a bit later in the guide."]},{"l":"Configuring your bot","p":["bot tab","Next we'll configure the bot user for your app, which allows it to appear and behave similarly to other server members.","On the left hand sidebar click Bot.","On this page, you can configure settings like its privileged intents or whether it can be installed by other users.","Intents determine which events Discord will send your app when you're creating a Gateway API connection. For example, if you want your app to do something when users add a reaction to a message, you can pass the GUILD_MESSAGE_REACTIONS( 1 10) intent.","Some intents are privileged, meaning they allow your app to access data that may be considered sensitive (like the contents of messages). Privileged intents appear and can be toggled on the Bot page in your app's settings. Standard, non-privileged intents don't require any additional permissions or configurations.","More information about intents and a full list of available intents, along with their associated events, is in the Gateway documentation.","There's also a Token section on the Bot page, which allows you to copy and reset your bot's token.","Bot tokens are used to authorize API requests and carry your bot user's permissions, making them . Make sure to never share your token or check it into any kind of version control.","Go ahead and copy the token, and store the token somewhere safe (like in a password manager).","You won't be able to view your token again unless you regenerate it, so make sure to keep it somewhere safe."]},{"l":"Adding scopes and bot permissions","p":["Apps need approval from installing users to perform actions in Discord (like creating a slash command or fetching a list of server members). Let's select a few scopes and permissions to request before installing the app.","When creating an app, scopes and permissions determine what your app can do and access in Discord servers.","OAuth2 Scopes determine what data access and actions your app can take, granted on behalf of an installing or authenticating user.","Permissions are the granular permissions for your bot user, the same as other users in Discord have. They can be approved by the installing user or later updated within server settings or with permission overwrites.","Click on OAuth2 in the left sidebar, then select URL generator.","The URL generator creates an installation link based on the scopes and permissions you select for your app. You can use the link to install the app onto your own server, or share it with others so they can install it.","applications.commands which allows your app to create commands.","bot adds your bot user. After you select bot, you can also select different permissions for your bot. For now, just check Send Messages. See a list of all OAuth2 scopes, or read more on permissions in the documentation."]},{"l":"Installing your app","p":["Once you add scopes, you should see a URL that you can copy to install your app.","After installing your app, you can head over to your server and see that it has joined ✨","With your app configured and installed, you can start developing it."]}],[{"l":"Dev environment","p":["Clone the following github repo: github.com/loomkoom/bot-template","Below is an overview of the main folders and files:","Install the required libraries, including Discord.py, by running the following command in the command prompt:","python3 -m pip install requirements.txt","Optional: use the Dockerfile to run your bot. (for this you need to have docker installed which can be a bit of a pain on windows)","A barebones dockerfile looks something like this:","You then need to build the image docker build -t my-bot . and run the container docker run my-bot"]}],[{"l":"Running your app"},{"l":"Adding credentials","p":["There's already some code in your bot.py file, but you'll need your app's token and ID to make requests. All of your credentials can be stored directly in the config.json file.","First, copy your bot user's token from earlier and paste it in the token field.","Next, navigate to your app's General Overview page, then copy the App ID and Public Key. Paste the values into the file as application_id and public_key."]},{"l":"Running bot","p":["You can now run the bot using your IDE or CLI interface like you would run any other python program.","python bot.py"]},{"l":"Send your invite link","p":["Please send us your bot invite link in the following discord channel so we can already invite your bot: #⁠invite-links"]}],[{"l":"Tutorials"}],[{"l":"Basic skeleton"}],[{"l":"Async await","p":["What are those async def and await keywords actually doing? First you need to know what the difference between synchronous and asynchronous programming.","Synchronous tasks happen in order, which means that you must finish task one before moving on to the next. Asynchronous tasks can be executed in any order or even simultaneously.","Asynchronous programming, is non-blocking, so the execution of one task isn’t dependent on another. Tasks can run simultaneously and operations can run in parallel.","In synchronous programming, the program waits for a particular task to complete before moving on to the next task, whereas in asynchronous programming, the program continues executing other tasks without waiting for the completion of the previous task.","Async/await is a way of writing asynchronous code that is easy to read and understand. It allows you to write asynchronous code that looks and behaves like synchronous code, making it easier to reason about and debug. In Python, async/await is used to create and pause coroutines, which are functions that can be paused and resumed at specific points in their execution. It's especially useful in Discord bots, where you often need to perform multiple tasks at once, such as processing messages and sending responses simultaneously.","To use async/await in Python, you need to define an async function using the async def syntax. Within the async function, you can use the await keyword to pause execution of the function until a coroutine is complete (this means the data you want is ready/computed). When the coroutine is complete, the value it returns is passed back to the calling function."]}],[{"l":"Event driven","p":["Event-driven programming is a programming paradigm where the flow of a program is determined by events such as user actions, sensor outputs, or message passing from other programs or threads. In an event-driven application, there is generally a main loop that listens for events and then triggers a callback function when one of those events is detected. In very simple terms the code you write is as folllows.","To create an event-driven program, the first step is to write a series of subroutines, or methods, called event-handler routines that handle the events to which the main program will respond. In discord.py these are created using @bot.event.","For a Discord bot, the event loop would listen for events in the Discord server and execute the corresponding event handlers. Some examples of events in a Discord bot are a user joining a server, a user sending a message, or a user reacting to a message. The event handler for a user sending a message could be a function that takes the message as an input, processes it, and sends a response back to the server. The event handler for a user reacting to a message could be a function that adds a reaction to the message or performs some other action. A full list of events can be found here: https://discordpy.readthedocs.io/en/stable/api.html#event-reference","The most common ones can be seen below."]}],[{"l":"Decorators"},{"l":"Basic use","p":["Decorators in Python are a design pattern that allows you to modify the functionality of a function by wrapping it in another function. In other words, a decorator is a function that takes another function and extends the behavior of the latter function without explicitly modifying it. The outer function is called the decorator, which takes the original function as an argument and returns a modified version of it.","In the context of a Python Discord bot, decorators can be useful for modifying the behavior of functions that are called when specific events happen, such as when a message is received or when a user joins the server. For example, a decorator can be used to check if the user sending a message is authorized to use a specific command before allowing the command to execute.","These decorators are used for different types of commands, permissions checking or modifiers. Examples of these decorators are as follows and work by adding them to any function.","More can be found in the docs: https://discordpy.readthedocs.io/en/stable/ext/commands/api.html?highlight=decorator#decorators"]},{"l":"Inner workings","p":["To go more in depth into decorators, there are a few important concepts related to Python functions that need to be understood. In Python, everything is an object, including functions. A function returns a value based on the given arguments. Functions in Python may also have side effects rather than just turning an input into an output. For example, the print() function is a basic example of a function that has a side effect of outputting something to the console.","To create a decorator, a few building blocks are used. First, a function is defined that takes another function as an argument. Then, a new function is defined inside the first function that calls the original function and modifies its behavior in some way. Finally, the new function is returned. Here is an example of a decorator in action:","When the my_function() is called, it is wrapped by the my_decorator() function, which modifies its behavior by printing \"Before the original function is called.\" before the original function is called and \"After the original function is called.\" after the original function is called.","Decorators can be used for a variety of purposes, such as adding logging, testing performance, performing caching, verifying permissions, and more. Decorators can also be used to run the same code on multiple functions, which avoids writing duplicating code.","In summary, decorators in Python are a powerful tool that allows programmers to modify the behavior of functions or classes without modifying the existing structure. They can be used in a variety of contexts, including Python Discord bots, to modify the behavior of functions that are called when specific events happen. However, it is important to understand how functions work in Python before diving into decorators. While decorators are a useful tool for wrapping code around defined blocks, debugging can become challenging when multiple decorators are used on a single function."]}],[{"l":"Examples"},{"i":"prefix-command","l":"Prefix Command:","p":["First a hello command that gives some very basic info:","In this implementation, we define a function named Hello using the @bot.command() decorator. The function takes a single parameter named ctx, which represents the context of the message that triggered the command.","Define the Hello command using the @bot.command() decorator, where bot is an instance of the discord.Bot() class or discord.ext.commands.Bot() class (for most use cases the same).","In the function that implements the Hello command, use the ctx parameter to access the context of the message that triggered the command. The context contains information about the channel, server, and user who sent the message.","Use the ctx.author attribute to get the discord.Member object that represents the user who sent the message. The discord.Member object contains information about the user's roles, nickname, status, and more.","(Use the ctx.channel attribute to get the discord.TextChannel object that represents the channel where the message was sent.)","Use the await ctx.send() method to send a message to the channel where the command was triggered. You can use this method to format the message."]},{"i":"slash-commands","l":"Slash Commands:"},{"l":"Dice roll"},{"l":"Nickname"},{"l":"send message"},{"l":"Embeds","p":["Embeds are a way to display your messages in a nice way. You make a discord.embed Object and can set the various fields, these can be found in the docs: https://discordpy.readthedocs.io/en/latest/api.html#discord.Embed"]},{"l":"giveaway command"},{"i":"button-selectmenu-dropdown","l":"Button, SelectMenu (Dropdown)"},{"l":"Button","p":["There are 2 ways to create working buttons, either by setting the callback or creating a separate class. the class-based approach is what you will find in docs and tutorials so that's what we advise."]},{"l":"method A"},{"l":"method B"},{"l":"Select"},{"l":"Webrequests"},{"l":"current BTC price"}],[{"l":"Webrequests","p":["Web requests are made through specific functions such as get() and post(). A GET request asks for data and a POST request sends data. The Python Requests module gives access to these functions. API keys are used to verify the program or application making the API call. There are different types of APIs, such as Web APIs or Web Service APIs, and REST API is a special type of Web API. There are different packages for making web requests, but requests is the most widely used.","To make a GET request using Python Requests, you can use the get() method with the website's URL passed in. You can also print other attributes related to the response such as the status code. To limit the data returned by the request, you can add a query parameter in the request using a Python dictionary with the desired parameter as the key and the desired value as the value, and pass it to the get() method using the params parameter. The response will be returned in JSON format, which can be easily read using the .json() method.","Roadblocks you can run into are headers, cookies or api keys that are needed to get access to a page. You can also get content from any webpage but then you have more work parsing the data you want. For that there's a library called beautifulsoup to find items in the HTML.","If you can find an qpi that's always easier. for example here is a list: https://apipheny.io/free-api/"]}],[{"l":"Part 1"},{"l":"1","p":["respond to sent text by repeating the message."]},{"l":"2","p":["Return amount of members in the server."]},{"l":"3","p":["Reaction add -> is_owner"]},{"l":"Part 2","p":["Oefening met embed en web request","urbandictionary","https://api.coindesk.com/v1/bpi/currentprice/BTC.json","thecatapi"]}],[{"l":"Resources","p":["Discord Docs","Discord.py Docs","Hosting on cloudflare worker","Template repo","example commands","logging","cogs","blacklist"]}]]